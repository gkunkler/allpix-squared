# A simulation configuration that creates an electron in the capacitor

[Allpix] # Basic configuration fields
log_level = LOG_LEVEL # How verbose the log output will be
log_format = LOG_FORMAT
detectors_file = "si_detector.conf" # Location of the detectors configuration file
number_of_events = 1 # Repeat the entire deposition+collection process this many times
# random_seed_core = 12728099196458894486 # Sets the random seed for consistency between read and writing. Not necessary anymore 
random_seed = 12728099196458894484
log_file = LOG_FILE

[GeometryBuilderGeant4]
world_material = "air" # Material outside of the detector

# [DepositionGeant4]
# detector = "TestDetector" # Name of the detector
# physics_list = FTFP_BERT_LIV # See Geant4 particle list documentation
# source_type = "macro" # Runs the following geant4 macro to generate particles
# file_name = SOURCE_FILE
# number_of_particles = NUMBER_OF_PARTICLES # Number of particles (or macros) per event
# max_step_length = 1um
# range_cut = 1um

[DepositionPointCharge]
detector = "TestDetector"
model = "DEPOSITION_TYPE"
position = 0um 0um 0um
spot_size = SPOT_SIZEum
number_of_charges = NUMBER_OF_CHARGES

[ElectricFieldReader] # Generates or loads an E-field in the detector 
model = "constant" # Makes the electric field a constant value in the direction of the plates (like an ideal capacitor
bias_voltage = BIAS_VOLTAGEV # -100V # -300V # Potential difference between the electrodes (divide by sensor thickness (in cm) to get typical field around 500-2000 V/cm)
output_plots = 0 # Whether or not to create plots in output/data.root 
output_plots_steps = 200
output_plots_single_pixel = 0

[WeightingPotentialReader] # Generates or loads the weighting potential for the detector
detector = "TestDetector"
model = "mesh" # Import the weighting potential from the file below
file_name = "weighting_potential3.apf"
field_mapping = "PIXEL_FULL" # See Chapter 4.5 in manual (Field Maps)
output_plots = 0

[InteractivePropagation]
max_charge_groups = MAX_CHARGE_GROUPS
charge_per_step = CHARGE_PER_STEP

integration_time = INTEGRATION_TIMEns
timestep = TIME_STEPns # Runge-Kutta time step (default is 0.1)
distance = 1 # 0 uses 1x1 grid of pixels, 1 uses 3x3 grid of pixels
output_plots = 1
output_rms = 1
output_plots_step = TIME_STEPns # Affects the time duration between log printing and RMS calculations

relative_permittivity = RELATIVE_PERMITIVITY
coulomb_field_limit = COULOMB_FIELD_LIMITV/cm # 5e5V/cm #default is 2e10 V/cm # TODO: Perhaps make this based off of distance the charge will travel?
coulomb_distance_limit = COULOMB_DISTANCE_LIMITcm

enable_diffusion = ENABLE_DIFFUSION
enable_coulomb_repulsion = ENABLE_COULOMB

propagate_electrons = PROPAGATE_ELECTRONS
propagate_holes = PROPAGATE_HOLES
include_mirror_charges = INCLUDE_MIRROR

# Implementing realistic parameters for CZT
mobility_model = "canali"
# mobility_electron = MOBILITY_Ecm*cm/V/s # 1000cm*cm/V/s
# mobility_hole = MOBILITY_Hcm*cm/V/s # 100cm*cm/V/s

# trapping_model = "constant"
# trapping_time_electron = 10us
# trapping_time_hole = 0.07us

# detrapping_model = "constant"
# detrapping_time_electron = 0.4us
# detrapping_time_hole = 0.07us

# recombination_model = "constant"
# lifetime_electron = 10us
# lifetime_hole = 1us

[PulseTransfer] # Uses pulse information from TransientPropagation to generate pixel data
detector = "TestDetector"
#timestep = 0.001ns
#max_depth_distance = 1um
output_pulsegraphs = 0

[ROOTObjectWriter] # Writes specified objects to root file
file_name = OUTPUT_FILE # File that will be created in output directory
include = "DepositedCharge", "PixelCharge", "PropagatedCharge" # Objects to be written
#include = "PixelCharge" #, "PixelHit" # Objects to be written (small-sized ones only)

